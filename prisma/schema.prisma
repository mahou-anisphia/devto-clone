// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Enhanced Post model with blog features
model Post {
    id             Int       @id @default(autoincrement())
    title          String
    content        String    @db.Text
    status         String    @default("draft") // draft or published
    featured_image String?
    view_count     Int       @default(0)
    published_at   DateTime?
    createdAt      DateTime  @default(now())
    updatedAt      DateTime  @updatedAt

    // Relations
    author     User             @relation(fields: [authorId], references: [id])
    authorId   String
    comments   Comment[]
    categories CategoryToPost[]
    tags       TagToPost[]

    @@index([title])
    @@index([status])
    @@index([published_at])
}

// New Comment model
model Comment {
    id        Int      @id @default(autoincrement())
    content   String   @db.Text
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    post           Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId         Int
    author         User      @relation(fields: [authorId], references: [id])
    authorId       String
    parent_comment Comment?  @relation("CommentToComment", fields: [parentId], references: [id])
    parentId       Int?
    replies        Comment[] @relation("CommentToComment")

    @@index([postId])
    @@index([authorId])
}

// New Category model
model Category {
    id          Int              @id @default(autoincrement())
    name        String           @unique
    slug        String           @unique
    description String?          @db.Text
    posts       CategoryToPost[]

    @@index([slug])
}

// New Tag model
model Tag {
    id    Int         @id @default(autoincrement())
    name  String      @unique
    slug  String      @unique
    posts TagToPost[]

    @@index([slug])
}

// Many-to-many relation tables
model CategoryToPost {
    post       Post     @relation(fields: [postId], references: [id])
    postId     Int
    category   Category @relation(fields: [categoryId], references: [id])
    categoryId Int

    @@id([postId, categoryId])
}

model TagToPost {
    post   Post @relation(fields: [postId], references: [id])
    postId Int
    tag    Tag  @relation(fields: [tagId], references: [id])
    tagId  Int

    @@id([postId, tagId])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    // adding for advanced post features
    comments      Comment[]
    // Username - password developed
    username      String?   @unique
    password      String?
    // Joined - developed
    joined        DateTime  @default(now())
    // Additional Information for Profile page
    profile       Profile? // Relation to profile
    social        Social? // Relation to social
    profileColor  String    @default("#5877ba")
}

model Profile {
    id              String   @id @default(cuid())
    userId          String   @unique
    user            User     @relation(fields: [userId], references: [id])
    bio             String?
    location        String?
    currentLearning String?
    availableFor    String?
    skills          String?
    currentProject  String?
    pronouns        Boolean?
    work            String?
    education       String?
}

model Social {
    id       String  @id @default(cuid())
    userId   String  @unique
    user     User    @relation(fields: [userId], references: [id])
    website  String?
    twitter  String?
    github   String?
    linkedin String?
    facebook String?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
